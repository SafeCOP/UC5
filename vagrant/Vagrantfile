# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder '.', '/vagrant', disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "4096"
    vb.customize [ 'modifyvm', :id, '--cpus', '2']
    vb.customize [ 'modifyvm', :id, '--uartmode1', 'disconnected']
    vb.customize [ 'modifyvm', :id, '--vram', '16']
    vb.customize [ 'modifyvm', :id, '--pae', 'off']
    vb.customize "pre-boot", ["storageattach", :id, "--storagectl", "IDE", "--port", "1", "--device", "0", "--type", "dvddrive", "--medium", "emptydrive"]
    vb.name = "safecop"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update -y
    apt-get upgrade -y
    apt-get install -y build-essential gcc g++ bison flex perl tcl-dev tk-dev blt libxml2-dev zlib1g-dev default-jre doxygen graphviz libwebkitgtk-1.0-0 openmpi-bin libopenmpi-dev libpcap-dev autoconf automake libtool libproj-dev libgdal1-dev libfox-1.6-dev libgdal-dev libxerces-c-dev qt4-dev-tools wish libopenscenegraph-dev libosgearth-dev openscenegraph-plugin-osgearth ubuntu-desktop lightdm linux-headers-$(uname -r) build-essential dkms xserver-xorg-core
    cat << EOF > /home/ubuntu/setup.sh
#!/bin/bash
git clone https://github.com/eclipse/sumo.git
cd sumo
git checkout v0_29_0
git checkout -b v0_29_0-safecop
cd sumo
make -f Makefile.cvs
./configure
make
cd ../../
echo "export SUMO_HOME=/home/ubuntu/sumo/sumo/" >> ~/.bashrc

# Before making a omnetpp repository for safecop, we used to download the source
# directly from the developers website, but this was very long, so we now use
# our own git mirror of the source
# wget --no-check-certificate -c -r -np -nd -H --referer https://omnetpp.org https://omnetpp.org/component/jdownloads/send/32-release-older-versions/2305-omnetpp-50-linux
# mv 2305-omnetpp-50-linux 2305-omnetpp-50-linux.gz
# tar xvf 2305-omnetpp-50-linux.gz
# cd omnetpp-5.0
# git init
# git add -A
# git commit -m "Initial commit for omnetpp-5.0"
#
git clone https://polimicg.org/gitlab/fez/omnetpp.git
cd omnetpp
git checkout omnetpp-5.0-safecop
source setenv -f
./configure
make
cd ..

git clone https://polimicg.org/gitlab/fez/veins.git
cd veins
git checkout veins-4.5-safecop
cd ..
EOF
    chown ubuntu:ubuntu /home/ubuntu/setup.sh
    chmod +x /home/ubuntu/setup.sh
    echo "ubuntu:safecop" | chpasswd
    apt-get autoremove -y
    apt-get autoclean -y
    apt-get clean -y
    dd if=/dev/zero of=/EMPTY bs=1M
    rm -f /EMPTY
  SHELL
end
